# # agents/format_agent.py
# # FormatAgent → correctly reads that and produces a slide skeleton.

# from .base_agent import BaseAgent

# class FormatAgent(BaseAgent):
#     """
#     Converts chapters/topics into a slide skeleton (dummy version).
#     """

#     def run(self):
#         self.log("Starting dummy slide skeleton creation...")

#         chapters = self.sm.get("chapters")
#         if not chapters:
#             self.log("No chapters found! Aborting.")
#             return

#         slides = []

#         for ch in chapters:
#             # Title slide for chapter
#             slides.append({
#                 "id": f"{ch['id']}_title",
#                 "type": "title",
#                 "title": ch["title"],
#                 "content": ""
#             })

#             for topic in ch["topics"]:
#                 slides.append({
#                     "id": topic["id"],
#                     "type": "content",
#                     "title": topic["title"],
#                     "content": topic["summary"],
#                     "key_points": topic["key_points"]
#                 })

#             # Dummy summary slide
#             slides.append({
#                 "id": f"{ch['id']}_summary",
#                 "type": "summary",
#                 "title": f"{ch['title']} Summary",
#                 "content": "This chapter covered all topics above."
#             })

#         self.update_state("slides", slides)
#         self.log(f"Dummy slides created: {len(slides)}")

#______________________________________________________________________________
##full dummy

# agents/format_agent.py
# FormatAgent → reads rich content and produces a detailed slide skeleton.

from .base_agent import BaseAgent

class FormatAgent(BaseAgent):
    """
    Converts the rich chapter/topic structure from the ContentAgent
    into a detailed slide-by-slide plan.
    """

    def run(self):
        self.log("Starting slide skeleton creation...")

        chapters = self.sm.get("chapters")
        if not chapters:
            self.log("ERROR: No chapters found in state. Aborting.")
            return

        slides = []
        slide_counter = 1

        # Add a main title slide for the entire presentation
        slides.append({
            "id": f"slide_{slide_counter}",
            "type": "main_title",
            "title": "Educational Presentation on Machine Learning",
            "subtitle": "Auto-Generated by the Multi-Agent System"
        })
        slide_counter += 1

        for ch in chapters:
            # Chapter title slide
            slides.append({
                "id": f"slide_{slide_counter}",
                "type": "chapter_title",
                "title": ch.get("title", "Untitled Chapter"),
                "subtitle": ch.get("description", "")
            })
            slide_counter += 1

            for topic in ch.get("topics", []):
                # Topic content slide
                slides.append({
                    "id": f"slide_{slide_counter}",
                    "type": "content",
                    "title": topic.get("title", "Untitled Topic"),
                    "bullets": topic.get("key_points", []),
                    "image_hint": topic.get("image_hint", None) # Pass along the hint
                })
                slide_counter += 1

            # Quiz slide for the chapter
            quiz_questions = []
            for topic in ch.get("topics", []):
                quiz_questions.extend(topic.get("quiz_questions", []))
            
            if quiz_questions:
                slides.append({
                    "id": f"slide_{slide_counter}",
                    "type": "quiz",
                    "title": f"Chapter {ch['id'][-1]} Quiz",
                    "bullets": quiz_questions
                })
                slide_counter += 1

        # Add a final "Thank You" slide
        slides.append({
            "id": f"slide_{slide_counter}",
            "type": "thank_you",
            "title": "Thank You!",
            "subtitle": "Any Questions?"
        })

        self.update_state("slides", slides)
        self.log(f"Slide skeleton created with {len(slides)} slides.")
        # Optional: Save a snapshot for debugging
        self.sm.save("shared_state_after_format.json")