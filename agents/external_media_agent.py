# agents/external_media_agent.py
# Adding a check to see if diagram code is being received.

from .base_agent import BaseAgent
from dotenv import load_dotenv
import os
import requests
import graphviz

class ExternalMediaAgent(BaseAgent):
    """
    Chooses the best visual for a slide, prioritizing diagrams.
    """
    def __init__(self, name, state_manager, config=None):
        super().__init__(name, state_manager)
        load_dotenv()
        self.pexels_api_key = os.getenv("PEXELS_API_KEY")
        if not self.pexels_api_key:
            self.log("WARNING: PEXELS_API_KEY not found. Stock photo search will be disabled.")
        self.assets_dir = "assets"
        os.makedirs(self.assets_dir, exist_ok=True)

    def _generate_diagram_from_dot(self, dot_code: str, slide_id: str) -> str | None:
        self.log(f"Attempting to generate diagram for slide {slide_id}...")
        try:
            source = graphviz.Source(dot_code)
            output_path = os.path.join(self.assets_dir, slide_id)
            rendered_path = source.render(output_path, format='png', cleanup=True)
            self.log(f"Diagram saved successfully to {rendered_path}")
            return rendered_path
        except graphviz.backend.execute.CalledProcessError as e:
            self.log(f"ERROR: Graphviz execution failed. Is Graphviz installed and in PATH? Error: {e}")
            return None
        except Exception as e:
            self.log(f"ERROR: Failed to generate diagram. Details: {e}")
            return None

    def _fetch_image_from_pexels(self, query: str, slide_id: str) -> str | None:
        # ... (This function remains unchanged)
        if not self.pexels_api_key: return None
        headers = {"Authorization": self.pexels_api_key}
        url = f"https://api.pexels.com/v1/search?query={query}&per_page=1"
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            if data["photos"]:
                image_url = data["photos"][0]["src"]["medium"]
                image_response = requests.get(image_url, timeout=20)
                image_response.raise_for_status()
                file_extension = image_url.split('.')[-1].split('?')[0] or 'jpeg'
                file_path = os.path.join(self.assets_dir, f"{slide_id}.{file_extension}")
                with open(file_path, 'wb') as f: f.write(image_response.content)
                self.log(f"Image downloaded successfully to {file_path}")
                return file_path
        except requests.exceptions.RequestException as e:
            self.log(f"ERROR: Pexels API request failed. Details: {e}")
        return None

    def run(self):
        self.log("Starting visual asset generation...")
        slides = self.sm.get("slides")
        if not slides: return

        found_diagram_code = False # Flag to check if we even find any DOT code

        for slide in slides:
            if slide.get("type") == "content":
                image_path = None
                
                # --- CHECK IF DOT CODE EXISTS ---
                dot_code = slide.get("diagram_dot_code")
                if dot_code:
                    self.log(f"Found DOT code for slide {slide['id']}: {dot_code}")
                    found_diagram_code = True # Set the flag
                    image_path = self._generate_diagram_from_dot(dot_code, slide["id"])
                # --------------------------------

                if not image_path and slide.get("image_hint"):
                    self.log(f"No diagram generated/found for slide {slide['id']}. Searching Pexels...")
                    image_path = self._fetch_image_from_pexels(slide["image_hint"], slide["id"])

                if image_path:
                    slide["image_path"] = image_path
        
        # --- Report if any DOT code was found ---
        if not found_diagram_code:
            self.log("NOTE: No 'diagram_dot_code' fields were found in the content generated by the AI for this PDF.")
        # ---------------------------------------
            
        self.update_state("slides", slides)
        self.sm.save("shared_state_after_media.json")